name: Create Release
run-name: Create ${{ github.event.inputs.release_type }} release by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        default: 'minor'
        options:
          - 'major'
          - 'minor'
          - 'patch'

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.release_type == 'patch' && 'main' || 'dev' }}

      - name: Get current version
        id: get_version
        run: |
          version=$(grep -oP '(?<=version:\s)[0-9]+\.[0-9]+\.[0-9]+' pubspec.yaml)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump_version
        run: |
          version=${{ steps.get_version.outputs.version }}
          IFS='.' read -r major minor patch <<< "$version"
          case "${{ github.event.inputs.release_type }}" in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac
          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update pubspec.yaml
        run: |
          new_version=${{ steps.bump_version.outputs.new_version }}
          sed -i "s/version: .*/version: $new_version/" pubspec.yaml

      - name: Configure Git
        run: |
          git config --local user.name "GitHub App"
          git config --local user.email "app@github.com"

      - name: Commit changes
        run: |
          git add pubspec.yaml
          git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"

      - name: Install auth library
        run: npm install @octokit/auth-app

      - name: Generate GitHub App token (debug)
        id: app_token
        run: |
          node <<'EOF'
          const { createAppAuth } = require("@octokit/auth-app");

          const appId = process.env.APP_ID;
          const privateKey = Buffer.from(process.env.BYPASS_RELEASE_KEY, 'base64').toString();
          const installationId = process.env.APP_INSTALLATION_ID;

          console.log("appId:", appId);
          console.log("installationId:", installationId);

          if (!appId || !installationId || !privateKey) {
            console.error("❌ Uma das variáveis está faltando.");
            process.exit(1);
          }

          const auth = createAppAuth({
            appId,
            privateKey,
            installationId,
          });

          auth({ type: "installation" }).then(authResult => {
            console.log("::add-mask::" + authResult.token);
            console.log("::set-output name=token::" + authResult.token);
          }).catch(error => {
            console.error("❌ Falha na autenticação:", error);
            process.exit(1);
          });
          EOF
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_INSTALLATION_ID: ${{ secrets.APP_INSTALLATION_ID }}
          BYPASS_RELEASE_KEY: ${{ secrets.BYPASS_RELEASE_KEY }}





      - name: Push release branch using GitHub App token
        env:
          TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          git checkout -b release/${{ steps.bump_version.outputs.new_version }}

          # Reconfigura a origem com o token correto
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}

          # Agora faz o push com o token do GitHub App
          git push origin HEAD:refs/heads/release/${{ steps.bump_version.outputs.new_version }}

